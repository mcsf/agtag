#!/bin/sh

# FIXME: addFilter, etc., not collected

# TODO: Deprioritise "import" @typedef matches as local, with "proper" @typedef matches as global
# TODO: Use line regex instead of line number as tag location

TARGET="${1:-.}"

: "${AG:=ag}"
: "${AG_FMT_OPTS:=-o --noheading --nobreak}"
: "${AG_JS_OPTS:=--js --ts}"
: "${AG_PHP_OPTS:=--php}"

# export default forwardRef( Component )
JS_WRAPPED_EXPORT='^export default (\w+\( )+\K\w+'
# export default withFilters( 'foo' )( Component )
JS_WRAPPED_EXPORT_CURRY_SHORT='^export default \w+\([^)]+\)\(\s*\K\w+'
# export default withSelect( ... )( Component )
JS_WRAPPED_EXPORT_CURRY_LONG='^export default \w+\(.*\s*(.*\s+)*?(}|]) \)\( \K\w+'
# export async function *foo() {}
JS_SINGLE_EXPORTS='^export (default )?(async )?(function( | *\* *)|class |const |interface |type )?(?!(function|class|const|interface)\b)\K\w+'
# export { foo as default, bar }
JS_OBJECT_EXPORTS='^(export (const )?|module\.exports = )\K{\s*(\w+,?\s+)*}' # Intentionally capture the surrounding braces
# /** @typedef {import(...).Props} MyProps
JS_JSDOC_TYPEDEFS='@typedef ({[^}]+} )?\K\w+'
# applyFilters( 'blockEditor.myFilter'
JS_WP_APPLY_FILTERS='\bapplyFilters\(\s*'\''\K[^'\''']+''
# withFilters( 'foo'
JS_WITH_FILTERS='\bwithFilters\(\s*'\''\K[^'\''']+''
# doAction( 'blockEditor.myAction'
JS_WP_DO_ACTION='\bdoAction\(\s*'\''\K[^'\''']+''
JS_ALL="($JS_WRAPPED_EXPORT)|($JS_WRAPPED_EXPORT_CURRY_SHORT)|($JS_WRAPPED_EXPORT_CURRY_LONG)|($JS_SINGLE_EXPORTS)|($JS_OBJECT_EXPORTS)|($JS_JSDOC_TYPEDEFS)|($JS_WP_APPLY_FILTERS)|($JS_WITH_FILTERS)|($JS_WP_DO_ACTION)"

# define( 'FOO', 42 )
PHP_DEFINE='\bdefine\(\s*'\''\K[^'\''']+''
# apply_filters( 'default_template_types'
PHP_WP_APPLY_FILTERS='\bapply_filters\(\s*'\''\K[^'\''']+''
PHP_WP_APPLY_FILTERS_REF_ARRAY='\bapply_filters_ref_array\(\s*'\''\K[^'\''']+''
PHP_DO_ACTION='\bdo_action\(\s*'\''\K[^'\''']+''
PHP_DO_ACTION_REF_ARRAY='\bdo_action_ref_array\(\s*'\''\K[^'\''']+''
# private function foo() {}
PHP_DEFS='^\s*(public |protected |private |static |abstract |final |readonly )*(function |class |const )\K\w+'
PHP_NAMESPACE='^\s*namespace\s+\K[A-Za-z\\_-]+'
PHP_ALL="($PHP_WP_APPLY_FILTERS|$PHP_WP_APPLY_FILTERS_REF_ARRAY|$PHP_DEFINE|$PHP_DO_ACTION|$PHP_DO_ACTION_REF_ARRAY|$PHP_DEFS|$PHP_NAMESPACE)"

find_symbols() {
	# shellcheck disable=2086
	$AG $AG_FMT_OPTS $AG_JS_OPTS "$JS_ALL" "$TARGET"
	# shellcheck disable=2086
	$AG $AG_FMT_OPTS $AG_PHP_OPTS "$PHP_ALL" "$TARGET"
}

# Intercept exports like "{ A as B, C }" and, for each export, produce a tag
# only for its new name, i.e. "B" and "C".
fix_js_obj_exports() {
	awk -F: '
		$3 ~ "{" { on = 1 }
		! on
		on {
			sub("{", "", $3)
			split($3, exports, /[[:space:]]*,[[:space:]]*/)
			for (i in exports) {
				sub("}", "", exports[i])
				sub(/^[[:space:]]*/, "", exports[i])
				sub(/[[:space:]]*$/, "", exports[i])
				n = split(exports[i], words, /[[:space:]]+/)
				if (words[n])
					print $1 ":" $2 ":" words[n]
			}
		}
		$3 ~ /}/ { on = 0 }
	'
}

# Vim doesn't like tags with backslashes. I like Vim, so I humour it.
# For tag containing backslashes, keep it but add a duplicate entry that uses
# forward slashes instead.
fix_backslashes() {
	awk '
		/./ {
			print
			if (gsub(/\\/, "/")) print
		}
	'
}

format_tags() {
	awk -F: 'BEGIN{OFS="\t"} {print $3, $1, $2 ";\""}'
}

# Avoid locale-related surprises, e.g. sort order.
LC_ALL=C

find_symbols | fix_js_obj_exports | fix_backslashes | format_tags | sort
